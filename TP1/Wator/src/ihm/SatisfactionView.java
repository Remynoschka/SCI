/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ihm;

import java.awt.Color;
import java.util.Observable;
import java.util.Observer;
import modele.Main;
import modele.Poisson;
import modele.Requin;

/**
 *
 * @author Remynoschka
 */
public class SatisfactionView extends javax.swing.JFrame implements Observer {

    /**
     * Creates new form SatisfactionView
     */
    public SatisfactionView() {
        initComponents();
        setLocationRelativeTo(null);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        valueFish = new javax.swing.JLabel();
        valueSharks = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        valueGlobal = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Satisfaction");

        jLabel1.setText("Satisfaction des poissons :");

        jLabel2.setText("Satisfaction des requins :");

        jLabel5.setText("Satisfaction globale :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(valueGlobal)
                    .addComponent(valueSharks)
                    .addComponent(valueFish))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(valueFish))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(valueSharks))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(valueGlobal))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel valueFish;
    private javax.swing.JLabel valueGlobal;
    private javax.swing.JLabel valueSharks;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) {
        if (((modele.Grille) o).getGlobalSatisfaction() < Main.SEUIL_SATISFACTION) {
            this.valueGlobal.setForeground(Color.RED);
        } else {
            this.valueGlobal.setForeground(Color.BLACK);
        }
        if (Poisson.getSatisfactionPoisson() < Main.SEUIL_SATISFACTION) {
            this.valueFish.setForeground(Color.RED);
        } else {
            this.valueFish.setForeground(Color.BLACK);
        }
        if (Requin.getSatisfactionRequin() < Main.SEUIL_SATISFACTION) {
            this.valueSharks.setForeground(Color.RED);
        } else {
            this.valueSharks.setForeground(Color.BLACK);
        }
        this.valueGlobal.setText("" + ((modele.Grille) o).getGlobalSatisfaction() + " %");
        this.valueFish.setText("" + Poisson.getSatisfactionPoisson() + " %");
        this.valueSharks.setText("" + Requin.getSatisfactionRequin() + " %");
    }
}
