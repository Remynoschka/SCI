/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ihm;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.util.List;
import modele.Agent;
import modele.Monstre;
import modele.PacMan;
import modele.PacManAgent;

/**
 * Affiche un environnement de type Grille pour WaTor
 *
 * @author Remy FRANCOIS
 */
public class Grille extends javax.swing.JPanel {

    public static final int VIEW_MODE_GRAPHIC = 0;
    public static final int VIEW_MODE_VALUE = 1;
    private static int VIEW_MODE = VIEW_MODE_GRAPHIC;
    private static final int CASE_SIZE = 20;
    private modele.Grille grille;

    /**
     * Creates new form Grille
     *
     * @param grille : le modele de grille
     */
    public Grille(modele.Grille grille) {
        this.grille = grille;
        initComponents();
        setPreferredSize(new Dimension(grille.getH() * CASE_SIZE, grille.getW() * CASE_SIZE));
    }

    /**
     * Changer la grille affichee
     *
     * @param grille : la nouvelle grille
     */
    public void setGrille(modele.Grille grille) {
        this.grille = grille;
        setPreferredSize(new Dimension(grille.getW() * CASE_SIZE, grille.getH() * CASE_SIZE));
        this.setSize(getPreferredSize());
    }

    public static void setViewMode(int val) {
        VIEW_MODE = val;
    }

    public static int getViewMode() {
        return VIEW_MODE;
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        // agents
        List<Agent> agents = grille.getAgents();
        for (Agent a : agents) {
            if (a.getClass().equals(PacMan.class)) {
                g.setColor(Color.YELLOW);
                g.fillOval(((PacManAgent) a).getX() * CASE_SIZE + CASE_SIZE / 4, ((PacManAgent) a).getY() * CASE_SIZE + CASE_SIZE / 4, CASE_SIZE / 2, CASE_SIZE / 2);
            } else if (a.getClass().equals(Monstre.class)) {
                g.setColor(Color.red);
                g.fillOval(((PacManAgent) a).getX() * CASE_SIZE + CASE_SIZE / 4, ((PacManAgent) a).getY() * CASE_SIZE + CASE_SIZE / 4, CASE_SIZE / 2, CASE_SIZE / 2);
            } else {
                g.setColor(new Color(102, 0, 204));
                g.fillRect(((PacManAgent) a).getX() * CASE_SIZE, ((PacManAgent) a).getY() * CASE_SIZE, CASE_SIZE, CASE_SIZE);
            }
        }
        if (VIEW_MODE == VIEW_MODE_VALUE) {
            g.setColor(Color.WHITE);
            for (int y = 0; y < grille.getH(); y++) {
                for (int x = 0; x < grille.getW(); x++) {
                    if (grille.isFree(x, y)) {
                        g.drawString(""+PacMan.INSTANCE.getDistanceValues()[x][y], x * CASE_SIZE + CASE_SIZE /2 - g.getFontMetrics().stringWidth(""+PacMan.INSTANCE.getDistanceValues()[x][y])/2, y * CASE_SIZE +  g.getFontMetrics().getHeight());
                    }
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
