/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ihm;

import java.util.Observable;
import java.util.Observer;
import modele.Main;

/**
 * Fenetre generale de l'application
 * @author Remy FRANCOIS
 */
public class Fenetre extends javax.swing.JFrame implements Observer {

    private modele.Grille grille;

    /**
     * Cree une fenetre
     * @param grille : le modele a affiche
     */
    public Fenetre(modele.Grille grille) {
        this.grille = grille;
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgModeAffichage = new javax.swing.ButtonGroup();
        grillePanel = new ihm.Grille(this.grille);
        jMenuBar1 = new javax.swing.JMenuBar();
        environnementMenu = new javax.swing.JMenu();
        newGridMenuItem = new javax.swing.JMenuItem();
        speedMenuItem = new javax.swing.JMenuItem();
        nbEnnemisMenuItem = new javax.swing.JMenuItem();
        nbWallsMenuItem = new javax.swing.JMenuItem();
        affichageMenu = new javax.swing.JMenu();
        graphicModeRB = new javax.swing.JRadioButtonMenuItem();
        valueViewRB = new javax.swing.JRadioButtonMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PacMan");

        javax.swing.GroupLayout grillePanelLayout = new javax.swing.GroupLayout(grillePanel);
        grillePanel.setLayout(grillePanelLayout);
        grillePanelLayout.setHorizontalGroup(
            grillePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 402, Short.MAX_VALUE)
        );
        grillePanelLayout.setVerticalGroup(
            grillePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 252, Short.MAX_VALUE)
        );

        environnementMenu.setText("Environnement");

        newGridMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        newGridMenuItem.setText("Nouvelle Grille");
        newGridMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGridMenuItemActionPerformed(evt);
            }
        });
        environnementMenu.add(newGridMenuItem);

        speedMenuItem.setText("Modifier la vitesse");
        speedMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                speedMenuItemActionPerformed(evt);
            }
        });
        environnementMenu.add(speedMenuItem);

        nbEnnemisMenuItem.setText("Modifier le nombre d'ennemis");
        nbEnnemisMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nbEnnemisMenuItemActionPerformed(evt);
            }
        });
        environnementMenu.add(nbEnnemisMenuItem);

        nbWallsMenuItem.setText("Modifier le nombre de murs");
        nbWallsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nbWallsMenuItemActionPerformed(evt);
            }
        });
        environnementMenu.add(nbWallsMenuItem);

        jMenuBar1.add(environnementMenu);

        affichageMenu.setText("Afficher");

        bgModeAffichage.add(graphicModeRB);
        graphicModeRB.setSelected(true);
        graphicModeRB.setText("Vue Graphique");
        graphicModeRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graphicModeRBActionPerformed(evt);
            }
        });
        affichageMenu.add(graphicModeRB);

        bgModeAffichage.add(valueViewRB);
        valueViewRB.setText("Vue des valeurs");
        valueViewRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valueViewRBActionPerformed(evt);
            }
        });
        affichageMenu.add(valueViewRB);

        jMenuBar1.add(affichageMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(grillePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(grillePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newGridMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGridMenuItemActionPerformed
        NewGridMenu m = new NewGridMenu(this, true);
        m.setVisible(true);
        if (m.getReturnStatus() == NewGridMenu.RET_OK) {
            this.grille = new modele.Grille(m.getHauteur(), m.getLargeur(), this.grille.getNbWalls(), this.grille.getNbMonstres());
            this.grille.generatePlacement();
            this.grille.addObserver(this);
            this.grillePanel.setGrille(grille);
            modele.Grille.GRILLE = this.grille;
            
            pack();
            
            repaint();
        }
    }//GEN-LAST:event_newGridMenuItemActionPerformed

    private void speedMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speedMenuItemActionPerformed
        SetSpeedMenu m = new SetSpeedMenu(this, true);
        m.setVisible(true);
        if (m.getReturnStatus() == SetSpeedMenu.RET_OK){
            Main.SPEED = m.getSpeed();
        }
    }//GEN-LAST:event_speedMenuItemActionPerformed

    private void nbEnnemisMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nbEnnemisMenuItemActionPerformed
        SetNbEnnemis m = new SetNbEnnemis(this, true);
        m.setVisible(true);
        if (m.getReturnStatus() == SetSpeedMenu.RET_OK){
            this.grille = new modele.Grille(this.grille.getH(), this.grille.getW(), this.grille.getNbWalls(), m.getNbEnnemis());
            this.grille.generatePlacement();
            this.grille.addObserver(this);
            this.grillePanel.setGrille(grille);
            modele.Grille.GRILLE = this.grille;
            
            pack();
            
            repaint();
        }
    }//GEN-LAST:event_nbEnnemisMenuItemActionPerformed

    private void nbWallsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nbWallsMenuItemActionPerformed
        SetNbWalls m = new SetNbWalls(this, true);
        m.setVisible(true);
        if (m.getReturnStatus() == SetSpeedMenu.RET_OK){
            this.grille = new modele.Grille(this.grille.getH(), this.grille.getW(), m.getNbWalls(), this.grille.getNbMonstres());
            this.grille.generatePlacement();
            this.grille.addObserver(this);
            this.grillePanel.setGrille(grille);
            modele.Grille.GRILLE = this.grille;
            
            pack();
            
            repaint();
        }
    }//GEN-LAST:event_nbWallsMenuItemActionPerformed

    private void graphicModeRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphicModeRBActionPerformed
        Grille.setViewMode(Grille.VIEW_MODE_GRAPHIC);
        repaint();
    }//GEN-LAST:event_graphicModeRBActionPerformed

    private void valueViewRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valueViewRBActionPerformed
        Grille.setViewMode(Grille.VIEW_MODE_VALUE);
        repaint();
    }//GEN-LAST:event_valueViewRBActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu affichageMenu;
    private javax.swing.ButtonGroup bgModeAffichage;
    private javax.swing.JMenu environnementMenu;
    private javax.swing.JRadioButtonMenuItem graphicModeRB;
    private ihm.Grille grillePanel;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem nbEnnemisMenuItem;
    private javax.swing.JMenuItem nbWallsMenuItem;
    private javax.swing.JMenuItem newGridMenuItem;
    private javax.swing.JMenuItem speedMenuItem;
    private javax.swing.JRadioButtonMenuItem valueViewRB;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) {
        repaint();
    }
}
